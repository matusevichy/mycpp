Kateryna Serdiuk
Assignment 4, Breakout

1. При обговоренні змінних, які знаходяться в скоупі самого класу (змінні-поля, ми інколи називаємо їх “глобальними”, хоча це некоректна назва), ми підкреслили, що вони мають бути “останнім засобом” для обміну даними в програмі. Майже завжди краще використати параметри, які передаються у функцію і результат який вона повертає. Для кожної змінної в програмі поясніть, чому ви вибрали створити її не-локально
(константи не вважаються змінними, тому не треба описувати константи тут).

Із "глобальних" змінних у мене є remainBricks, vx, vy.
vx, vy - я скористалася мануалом, у якому було написано "Програма повинна стежити за швидкістю м’яча, який складається з двох окремих компонентів, які ви, ймовірно, оголосили в змінних класу: private double vx, vy;". В мене були спроби зробити це в окремому методі getVelocity, і потім передавати змінні в інші методи, але параметри швидкості передаються в програмі аж у 3 методи: play(), moveBall(), checkCollider() і я просто не знала як їх туди коректно передати. Тобто, я не знаю зараз як зробити область видимості змінних такою, щоб можна було використати у всіх необхідних місцях.
Та сама причина і з remainBricks. Ця змінна використовується у play(), checkCollider(), playGame(). Я думаю, що причина оголошення змінної саме так - тільки у недостітній кулькості знань і практики і був спосіб (і не один) зробити це коректрно. Але, я намагалася, та постійно щось інше зачипало і не виходило. А так було досить просто ці змінні використовувати в інших методах і не думати про передачу.  


2. Гра закінчується або коли користувач втрачає три кулі, або коли уся цегла розбита. Як ви перевіряєте закінчення гри в цьому другому випадку?

 Я ввела як раз "глобальну" змінну remainBricks, що дорівнює добутку кількості кубиків у рядку на кількість рядків -  NBRICK_ROWS * NBRICKS_PER_ROW (початкове значення в нашій задачі регулюється константами і дорівнює 100) і використала її тричі:  
- спочатку у методі checkCollider(), коли визначила, що куля зіткнулась саме з кубиком, то видаляю його після зіткнення, і лічильник кубиків зменшується на 1.

- у методі play() як умова для відтворення анімації (продовження гри) remainBricks != 0 && ball.getY() + 2 * BALL_RADIUS < getHeight(). Тобто поки кубики є і куля не пішла за нижній край вікна - відбувається її рух. Якщо кубиків не залишиться, то значить користувач виграв і анімація зупиниться, з екрана прибереться куля і ракетка і на єкрані з'явиться повідомлкення про виграш.

 - і потім вже у методі playGame() змінна remainBricks виступає однією з умов закінчення гри та її результату: якщо 3 спроби вийшли та кубики залишилися, то користувач програв, а якщо змінна дорівнює 0, то значить користувач розбив усі кубики і виграв.


