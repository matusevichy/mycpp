Задание 1.
//Написать  программу  для  хранения  в  битовом  поле  информации  о  конфигурации  компьютера.Напри - мер: Корпус AT — 0, ATX — 1; Видео на борту — 0, карта — 1 и так далее.

#include<iostream>
using namespace std;

struct Config
{
	unsigned Case : 1;
	unsigned Core : 2;
	unsigned Video : 2;
	unsigned Memory : 2;
};

int main()
{
	Config mas[1];
	unsigned tmp;
	cout << "Enter 4 element of computer configuration:\n";
	cout << "Case (AT = 0  or ATX = 1) ";
	cin >> tmp;
	mas[0].Case = tmp;
	cout << "Core (1-core = 0, 2-cores = 1, 4-cores = 2, 6-cores = 3 ";
	cin >> tmp;
	mas[0].Core = tmp;
	cout << "Video adapter (0 = onboard, 1 = external) ";
	cin >> tmp;
	mas[0].Video = tmp;
	cout << "Memory (0 = DDR2, 1 = DDR3, 2 = DDR4, 3 = DDR4 ";
	cin >> tmp;
	mas[0].Memory = tmp;
	cout << mas[0].Case << "\t" << mas[0].Core << "\t" << mas[0].Video << "\t" << mas[0].Memory;
}

Задание 2.

//Написать программу учета сдачи зачетов при помощи битовых полей.Структура содержит поля : фамилия, группа, зачеты(битовое поле).
//Предусмотреть вывод списков сдавших все зачеты и должников по группам и в алфавитном порядке.

#define _CRT_SECURE_NO_WARNINGS
#include<iostream>
using namespace std;

struct Exam
{
	char Fio[50];
	char Group[10];
	unsigned rezult : 1;
};

Exam* Read(Exam* mas, int& n)
{
	FILE* fp = fopen("students.txt", "r");
	if (fp)
	{
		fread(&n, sizeof(n), 1, fp);
		mas = (Exam*)malloc(n * sizeof(Exam));
		fread(mas, sizeof(mas[0]), n, fp);
		fclose(fp);
	}
	else
	{
		cout << "File not found!";
	}
	return mas;
}

void Write(Exam* mas, int n)
{
	FILE* fp = fopen("students.txt", "w");
	if (fp)
	{
		fwrite(&n, sizeof(n), 1, fp);
		fwrite(mas, sizeof(mas[0]), n, fp);
		fclose(fp);
	}
	else
	{
		cout << "Error open file!";
	}
}

Exam* Sort(Exam* mas, int n)
{
	Exam tmp;
	for (int i = 0; i < n; i++)
	{
		for (int j = n-1; j >= 0; j--)
		{
			if (strcmp(mas[j].Fio,mas[j-1].Fio)<0)
			{
				tmp = mas[j];
				mas[j] = mas[j - 1];
				mas[j - 1] = tmp;
			}
		}
	}
	for (int i = 0; i < n; i++)
	{
		for (int j = n - 1; j >= 0; j--)
		{
			if (strcmp(mas[j].Group, mas[j - 1].Group) == -1)
			{
				tmp = mas[j];
				mas[j] = mas[j - 1];
				mas[j - 1] = tmp;
			}
		}
	}
	return mas;
}

Exam* Add(Exam* mas, int& n)
{
	unsigned tmp;
	mas = (Exam*)realloc(mas, (n + 1) * sizeof(Exam));
	cout << "Enter FIO: ";
	gets_s(mas[n].Fio, 50);
	cout << "Enter group name: ";
	gets_s(mas[n].Group, 10);
	cout << "Enter exam result: ";
	cin >> tmp;
	mas[n].rezult = tmp;
	n++;
	mas=Sort(mas, n);
	Write(mas, n);
	return mas;
}

void Show(Exam* mas, int n, char op)
{
	for (int i = 0; i < n; i++)
	{
		if (mas[i].rezult == op)
		{
			cout << mas[i].Fio << "\t" << mas[i].Group << "\t" << mas[i].rezult << endl;
		}
	}
}

int main()
{
	int act, n = 0;
	Exam* mas = nullptr;
	mas=Read(mas, n);
	do
	{
		do
		{
			cout << "Select action:\n";
			cout << "1 - Add;\n";
			cout << "2 - Show list of good students;\n";
			cout << "3 - Show list of bad students;\n";
			cout << "0 - Exit.\n";
			cin >> act;
			getchar();
		} while (act < 0 || act>3);
		switch(act)
		{
		case 1:
		{
			mas=Add(mas, n);
			break;
		}
		case 2:
		{
			Show(mas, n, 1);
			break;
		}
		case 3:
		{
			Show(mas, n, 0);
			break;
		}
		default:
			break;
		}
	} while (act != 0);
}

Задание 3.

//Создать битовое поле для хранения времени(часы, минуты, секунды, миллисекунды).Написать функции для установки и получения времени в(из) битовое(-го) поле(-я).
#include<iostream>
using namespace std;

struct Time
{
	unsigned hour : 5;
	unsigned minutes : 6;
	unsigned seconds : 6;
	unsigned mseconds : 10;
};

Time Set()
{
	Time t;
	unsigned tmp;
	cout << "Enter hour: ";
	cin >> tmp;
	t.hour = tmp;
	cout << "Enter minutes: ";
	cin >> tmp;
	t.minutes = tmp;
	cout << "Enter seconds: ";
	cin >> tmp;
	t.seconds = tmp;
	cout << "Enter mseconds: ";
	cin >> tmp;
	t.mseconds = tmp;
	return t;
}

void View(Time t)
{
	cout << t.hour << ":" << t.minutes << ":" << t.seconds << ":" << t.mseconds << endl;
}

int main()
{
	int act;
	Time T;
	do
	{
		do
		{
			cout << "Select action: \n";
			cout << "1 - set time;\n";
			cout << "2 - view time;\n";
			cout << "0 - Exit.\n";
			cin >> act;
		} while (act < 0 || act>2);
		switch (act)
		{
		case 1:
		{
			T = Set();
			break;
		}
		case 2:
		{
			View(T);
			break;
		}
		default:
			break;
		}
	} while (act != 0);
}

